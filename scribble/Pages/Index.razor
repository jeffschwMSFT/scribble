@page "/"
@using System.Text;
@using Blazor.Extensions.Canvas.Canvas2D;
@using Blazor.Extensions;
@using Microsoft.AspNetCore.SignalR.Client;
@using Microsoft.AspNetCore.Http;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Authorization;
@using System.Globalization;
@using System.Timers;
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@implements IDisposable

<!-- better timer management? -->
<!-- undue (go back)/ eraser -->
<!-- disappear the 'practice drawing here' -->
<!-- fill? -->
<!-- accessible and size is not great -->

<style>
    #drawn {
        border-radius: 255px 15px 255px 15px/15px 255px 15px 255px;
        border: solid 5px hsla(67,95%,35%,1);
        display: inline-block;
        padding: 1em;
        line-height: 1.5em;
        float: left;
    }

    scrollbox {
        border-radius: 255px 15px 255px 15px/15px 255px 15px 255px;
        border: solid 5px hsla(67,95%,35%,1);
        display: inline-block;
        padding: 1em;
        line-height: 1.5em;
    }

    button {
        border-radius: 55px 15px 55px 15px/15px 55px 15px 55px;
        border: solid 5px hsla(67,95%,35%,1);
        display: inline-block;
        background-color: lightgrey;
    }

    input {
        border-radius: 255px 15px 255px 15px/15px 255px 15px 255px;
        border: solid 5px hsla(67,95%,35%,1);
        display: inline-block;
        vertical-align: middle;
    }

    select {
        border-radius: 255px 15px 255px 15px/15px 255px 15px 255px;
        border: solid 5px hsla(67,95%,35%,1);
        display: inline-block;
    }

    textarea {
        border-radius: 255px 15px 255px 15px/15px 255px 15px 255px;
        border: solid 5px hsla(67,95%,35%,1);
        display: inline-block;
    }
</style>

<!-- submit on enter: https://github.com/dotnet/aspnetcore/issues/15635#issuecomment-546675431 -->

<div class="page" style="height: 100%; width: 100%;">
    <h1 hidden="@(Scene != SceneType.Main && Scene != SceneType.Lobby)">Welcome to Scribble!</h1>
    <div class="main" id="drawn" name="newgamePanel" hidden="@(Scene != SceneType.Main)">
        <h2>Create a new Game</h2>
        Choose words to draw:<br />
        <textarea @bind="WordInput" rows="10" /><br />
        <p style="font-size:9px">Newline seperated list of words</p>
        Turn timer <input @bind="TimeoutInput" type="number" size="4" /><br />
        <button @onclick="GotoNextScene">Create game</button>
    </div>

    <div class="main" id="drawn" name="joinPanel" hidden="@(Scene != SceneType.Main)">
        <h2>Join a Game</h2>
        <input @bind-value="JoinGameIdInput" @bind-value:event="oninput" @onkeyup="e => KeyUpNextScene(e)" />
        <button @onclick="GotoNextScene">Join game</button>
    </div>

    <div class="main" id="drawn" name="picknamePanel" hidden="@(Scene != SceneType.Lobby)">
        User name: <input @bind-value="UsernameInput" @bind-value:event="oninput" @onkeyup="e => KeyUpNextScene(e)" size="35" /><br />
        <p style="font-size:9px">Usernames with ',' (comma), ':' (colon), or '&lt;' (lt) are not allowed</p>
        <button type="submit" @onclick="GotoNextScene">Join Game</button>
    </div>

    <div name="joinPanel" id="drawn" hidden="@(Scene != SceneType.Play)">
        Hello @(UsernameInput)<br />
        <div id="scrollbox" style="height: 600px;overflow: scroll;overflow-x: hidden;">
            <table border="1" id="drawn" cellpadding="5">
                <tr><th>Player</th><th>Score</th></tr>
                @foreach (var user in Users)
                {
                    // enoded as 'username:score'
                    var parts = user.Split(':');
                        <tr>
                            <th>@(parts.Length >= 1 ? parts[0] : "")</th>
                            <td>@(parts.Length >= 2 ? parts[1] : "0")</td>
                        </tr>
                }
            </table>
        </div>
        <p hidden="@(Scene != SceneType.Play || !IsOwner)">Select 'Draw' to choose the next player to draw</p>
        <button @onclick="StartNextRound" hidden="@(Scene != SceneType.Play || !IsOwner || GameState != GameStateType.Waiting)">Draw</button>
        <button @onclick="EndRoundEarly" hidden="@(Scene != SceneType.Play || !IsOwner || GameState != GameStateType.Playing)">End Round</button>
    </div>

    <div name="gamePanel" id="drawn" hidden="@(Scene != SceneType.Play)">
        <pre style="font-size: 20px;">@(string.IsNullOrWhiteSpace(WordToDraw) ? "" : $"{WordToDraw}")</pre>
        <pre style="font-size: 16px;">@(string.IsNullOrWhiteSpace(PlayerDrawing) ? "" : $"by {PlayerDrawing} in {WordTimeout} seconds")</pre>

        <div id="canvas" style="border: double" tabindex="0" @onmouseup="e => MouseUp(e)" @onmousedown="e => MouseDown(e)" @onmousemove="e => MouseMove(e)" @ontouchstart="e => TouchDown(e)" @ontouchend="e => TouchUp(e)" @ontouchmove="e => TouchMove(e)" @ontouchmove:preventDefault @ontouchmove:stopPropagation>
            <BECanvas Width="@Width" Height="@Height" @ref="CanvasReference"></BECanvas>
        </div>

        <div class="form-group">
            <input type="button" style="background: #ff0000; border: dashed;" size="4" @onclick='e => ChangeColor(e,"rgba(255,0,0,1.0)")' />
            <input type="button" style="background: #22b14c; border: dashed;" size="4" @onclick='e => ChangeColor(e,"rgba(34,177,76,1.0)")' />
            <input type="button" style="background: #0000ff; border: dashed;" size="4" @onclick='e => ChangeColor(e,"rgba(0,0,255,1.0)")' />
            <input type="button" style="background: #400080; border: dashed;" size="4" @onclick='e => ChangeColor(e,"rgba(64,0,128,1.0)")' />
            <input type="button" style="background: #ffff80; border: dashed;" size="4" @onclick='e => ChangeColor(e,"rgba(255,255,128,1.0)")' />
            <input type="button" style="background: #ff8000; border: dashed;" size="4" @onclick='e => ChangeColor(e,"rgba(255,128,0,1.0)")' />
            <input type="button" style="background: #808080; border: dashed;" size="4" @onclick='e => ChangeColor(e,"rgba(128,128,128,1.0)")' />
            <input type="button" style="background: #ff80ff; border: dashed;" size="4" @onclick='e => ChangeColor(e,"rgba(255,128,255,1.0)")' />
            <input type="button" style="background: #804000; border: dashed;" size="4" @onclick='e => ChangeColor(e,"rgba(128,64,0,1.0)")' />
            <input type="button" style="background: #000000; border: dashed;" size="4" @onclick='e => ChangeColor(e,"rgba(0,0,0,1.0)")' />
            <input type="button" style="background: #ffffff; border: dashed;" size="4" @onclick='e => ChangeColor(e,"rgba(255,255,255,1.0)")' />
            <input type="color" style="border: dashed;" @bind-value="ColorInput" @bind-value:event="oninput" @onchange="ColorOnChange" vaue="#FF0000" />
            <input type="range" style="border: hidden;" class="slider" min=1 max=40 @bind="DiameterInput" step="1"/>
            <button @onclick="HandleClearScreen">Clear</button>
            <br />
        </div>
        <div id="scrollbox" style="width: 500px;height: 300px;overflow: scroll;display: flex;flex-direction: column-reverse;overflow-x: hidden;">
            @for (int i = Messages.Count - 1; i >= 0; i--)
            {
                <div>
                    <div class="msg">@Messages[i]</div>
                </div>
            }
            <hr />
        </div>
        <input size="50" @bind-value="MessageInput" @bind-value:event="oninput" @onkeyup="e => KeyUpSendMessage(e)" />
        <button @onclick="SendMessage">Send</button>
    </div>
</div>

@code {
    //
    // state
    //
    private HubConnection HubConnection;
    private List<string> Messages = new List<string>();
    private string MessageInput;
    private int DiameterInput = 5;
    private const int Width = 500;
    private const int Height = 300;
    private const int MaxUsernameLength = 20;
    private string Group;
    private enum SceneType { None, Main, Lobby, Play };
    private SceneType Scene = SceneType.None;
    private string UsernameInput = "";
    private string WordInput;
    private int TimeoutInput = 60;
    private List<string> Users = new List<string>();
    private string JoinGameIdInput;

    // game play
    private string ColorInput = "#ff0000";
    private string CurrentColor = "rgba(255,0,0,1.0)";
    private bool HubCanDraw = false; // controled via Hub
    private enum GameStateType { Waiting, Playing };
    private GameStateType GameState = GameStateType.Waiting;
    private string WordToDraw;
    private string PlayerDrawing;
    private int WordTimeout;
    private Timer CountDown;
    private bool PracticeDrawingMode;
    private double PreviousX = -1;
    private double PreviousY = -1;
    private bool DrawingPenIsDown = false;
    private Canvas2DContext Context;
    private BECanvasComponent CanvasReference;
    private BoundingClientRect CanvasRect = null;

    private bool IsOwner { get { return !string.IsNullOrWhiteSpace(WordInput); } }

    public class BoundingClientRect
    {
        public double X { get; set; }
        public double Y { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }
        public double Top { get; set; }
        public double Right { get; set; }
        public double Bottom { get; set; }
        public double Left { get; set; }
    }

    //
    // Scene state machine
    //
    //  Main -- Create or join
    //   |
    //   (has a group - via query string)
    //   |
    //  \/
    //  PickName -- choose your name and join
    //   |
    //   (has a username -- via UsernameInput)
    //   |
    //  \/
    //  Play -- the main game scene
    //
    //  Waiting <--> Playing

    //
    // hub communication
    //
    Task SendMessage(string group, string message) => HubConnection?.SendAsync("SendMessage", group, message);
    Task SendLine(double x1, double y1, double x2, double y2, string color, float diameter) => HubConnection?.SendAsync("SendLine", Group, x1, y1, x2, y2, color, diameter);
    Task SendClear(string group) => HubConnection?.SendAsync("SendClear", group);
    Task SendJoin(string group, string username) => HubConnection?.SendAsync("SendJoin", group, username);
    Task SendStartGame(string group, int timeout, string seperator, string words) => HubConnection?.SendAsync("SendStartGame", group, timeout, seperator, words);
    Task SendNextRound(string group) => HubConnection?.SendAsync("SendNextRound", group);
    Task SendRoundComplete(string group) => HubConnection?.SendAsync("SendRoundComplete", group);
    public bool IsConnected => HubConnection?.State == HubConnectionState.Connected;

    //
    // overloads
    //
    public void Dispose()
    {
        _ = HubConnection?.DisposeAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        // parse group name and determine the initial game state
        var uriparts = NavigationManager.Uri.Split('?');
        Group = "";
        if (uriparts.Length >= 2) Group = uriparts[1];

        // connect
        if (HubConnection == null)
        {
            // connect to signalr
            HubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/updatehub"))
                .Build();

            HubConnection.On<string>("ReceiveMessage", (message) =>
            {
                // add
                Messages.Add($"{message}");
                // trim to keep a reasonable amount
                if (Messages.Count > 250) Messages.RemoveRange(0, 50);
                InvokeAsync(StateHasChanged);
            });

            HubConnection.On<double, double, double, double, string, float>("ReceiveLine", (x1, y1, x2, y2, color, diameter) =>
            {
                DrawLine(x1, y1, x2, y2, color, diameter);
                InvokeAsync(StateHasChanged);
            });

            HubConnection.On<string>("ReceiveJoin", (users) =>
            {
                Users.Clear();
                foreach (var u in users.Split(',')) Users.Add(u);
                InvokeAsync(StateHasChanged);
            });

            HubConnection.On("ReceiveClear", () =>
            {
                ClearScreen();
                InvokeAsync(StateHasChanged);
            });

            HubConnection.On("ReceiveStartGame", () =>
            {
                // start the game
                Scene = SceneType.Play;
                InvokeAsync(StateHasChanged);
            });

            HubConnection.On<string, int, string, bool>("ReceiveNextRound", (player, timeout, word, candraw) =>
            {
                // check scene state
                if (Scene == SceneType.Lobby) return;

                // clear the screen
                ClearScreen();

                // setup the details
                PracticeDrawingMode = false;
                HubCanDraw = candraw;
                WordToDraw = word;
                WordTimeout = timeout;
                PlayerDrawing = player;
                GameState = GameStateType.Playing;
                CountDown = new Timer(1000);
                CountDown.Elapsed += async (sender, e) =>
                {
                    if (WordTimeout > 0) WordTimeout--;
                    else
                    {
                        if (HubCanDraw || IsOwner) await SendRoundComplete(Group);
                        CountDown.Stop();
                    }
                    // refresh
                    InvokeAsync(StateHasChanged);
                };
                CountDown.Start();

                // refesh
                InvokeAsync(StateHasChanged);
            });

            HubConnection.On<string>("ReceiveRoundComplete", (word) =>
            {
                if (GameState == GameStateType.Playing)
                {
                    GameState = GameStateType.Waiting;
                    HubCanDraw = false;
                    WordToDraw = word;
                    WordTimeout = 0;
                    CountDown.Stop();
                    Messages.Add("**** round complete ****");
                    InvokeAsync(StateHasChanged);
                }
            });

            await HubConnection.StartAsync();
        }

        await ChangeSceneState();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Context == null)
        {
            Context = await CanvasReference.CreateCanvas2DAsync();
            PreviousX = PreviousY = -1;
            DrawingPenIsDown = false;
            PracticeDrawingMode = true;

            WriteText(Width / 4f - 30, Height / 2f - 10, 30, "Practice drawing here");
        }
    }

    //
    // scene state
    //
    private async Task ChangeSceneState()
    {
        if (Scene == SceneType.Play)
        {
            // nothing
        }
        else if (!string.IsNullOrWhiteSpace(Group))
        {
            if (string.IsNullOrWhiteSpace(UsernameInput) || UsernameInput.IndexOf(',') >= 0 || UsernameInput.IndexOf('<') >= 0 || UsernameInput.IndexOf(':') >= 0)
            {
                if (Scene == SceneType.Lobby) UsernameInput = "<choose your user name>";
                Scene = SceneType.Lobby;
            }
            else
            {
                // truncate the name (if necessary)
                if (UsernameInput.Length > MaxUsernameLength)
                {
                    UsernameInput = $"{UsernameInput.Substring(0, MaxUsernameLength - 3)}...";
                }

                // join the game
                await SendJoin(Group, UsernameInput);

                if (IsOwner)
                {
                    // start the game
                    await SendStartGame(Group, TimeoutInput, "\n", WordInput);
                }

                Scene = SceneType.Play;
            }
        }
        else
        {
            Scene = SceneType.Main;
        }
        // refresh
        InvokeAsync(StateHasChanged);
    }

    private async void GotoNextScene()
    {
        if (!string.IsNullOrWhiteSpace(JoinGameIdInput))
        {
            // join an existing game
            Group = JoinGameIdInput;

            // update the url so that it is easy to cut and paste
            NavigationManager.NavigateTo($"/?{Group}");
        }
        else if (string.IsNullOrWhiteSpace(Group))
        {
            if (string.IsNullOrWhiteSpace(WordInput) || WordInput.IndexOf('<') >= 0)
            {
                WordInput = "<include a set of words to draw>";
                return;
            }

            // generate random group
            var groupname = new StringBuilder(6);
            var rand = new Random();
            for (int i = 0; i < 6; i++)
            {
                if (rand.Next() % 2 == 0)
                {
                    // number
                    groupname.Append((char)((rand.Next() % 10) + (int)'0'));
                }
                else
                {
                    // letter
                    groupname.Append((char)((rand.Next() % 26) + (int)'a'));
                }
            }
            Group = groupname.ToString();

            // update the url so that it is easy to cut and paste
            NavigationManager.NavigateTo($"/?{Group}");
        }
        await ChangeSceneState();
    }

    private bool KeyUpNextScene(KeyboardEventArgs e)
    {
        if (e.Code == "Enter") GotoNextScene();
        return true;
    }

    //
    // game play
    //
    private bool KeyUpSendMessage(KeyboardEventArgs e)
    {
        if (e.Code == "Enter") SendMessage();
        return true;
    }

    private async void SendMessage()
    {
        if (Scene != SceneType.Play) return;
        if (string.IsNullOrWhiteSpace(MessageInput)) return;
        await SendMessage(Group, MessageInput);
        // clear the message
        MessageInput = "";
    }

    private async void StartNextRound()
    {
        await SendNextRound(Group);
    }

    private async void EndRoundEarly()
    {
        await SendRoundComplete(Group);
    }

    private async void HandleClearScreen()
    {
        // clear local screen
        if (!PracticeDrawingMode)
        {
            if (!HubCanDraw) return;
            if (Scene != SceneType.Play) return;
            // clear all screens
            await SendClear(Group);
        }
        ClearScreen();
        // let go of the pen
        DrawingPenIsDown = false;
    }

    private void ColorOnChange(ChangeEventArgs e)
    {
        CurrentColor = HexToRgba(ColorInput);
    }

    private void ChangeColor(MouseEventArgs e, string rgba)
    {
        CurrentColor = rgba;
        ColorInput = RgbaToHex(rgba);
    }

    private string RgbaToHex(string rgba)
    {
        if (string.IsNullOrWhiteSpace(rgba) || !rgba.StartsWith("rgba(", StringComparison.InvariantCultureIgnoreCase)) return "#ff0000";

        // from 'rgba(255,0,128,1.0)' to '#ff0080'
        var parts = rgba.Replace("rgba(", "", StringComparison.InvariantCultureIgnoreCase).Split(',');
        if (parts.Length < 3) return "#ff0000";
        return $"#{Convert.ToByte(parts[0]):x2}{Convert.ToByte(parts[1]):x2}{Convert.ToByte(parts[2]):x2}";
    }

    private string HexToRgba(string hex)
    {
        if (string.IsNullOrWhiteSpace(hex)) return "rgba(255,0,0,1.0)";

        // from '#ff0080' to 'rgba(255,0,128,1.0)'
        var previous = '\0';
        var sb = new StringBuilder();
        var colorparts = 0;
        sb.Append("rgba(");
        foreach (var c in hex.ToCharArray())
        {
            if (c == '#') continue;
            else if (previous == '\0') previous = c;
            else
            {
                var val = byte.Parse($"{previous}{c}", NumberStyles.HexNumber, CultureInfo.InvariantCulture);
                sb.Append($"{val},");
                previous = '\0';
                colorparts++;
            }
        }
        sb.Append("1.0)");

        // safe guard (the color was wrong)
        if (colorparts != 3) return "rgba(255,0,0,1.0)";
        return sb.ToString();
    }

    //
    // canvas
    //

    // todo touch

    protected bool TouchUp(TouchEventArgs e)
    {
        HandleUp();
        return true;
    }
    protected bool MouseUp(MouseEventArgs e)
    {
        HandleUp();
        return true;
    }
    protected void HandleUp()
    {
        if (!PracticeDrawingMode)
        {
            if (!HubCanDraw) return;
            if (Scene != SceneType.Play) return;
        }
        if (Context == null) return;

        // pick up the pen
        PreviousX = PreviousY = -1;
        DrawingPenIsDown = false;
    }

    protected async Task<bool> TouchDown(TouchEventArgs e)
    {
        if (e.Touches == null || e.Touches.Length == 0) return false;

        // get the canvas bounding rect
        CanvasRect = await JSRuntime.InvokeAsync<BoundingClientRect>("DOMGetBoundingClientRect", "canvas");

        // translate to offset
        var offsetx = e.Touches[0].ClientX - CanvasRect.Left;
        var offsety = e.Touches[0].ClientY - CanvasRect.Top;

        // handledown
        HandleDown(offsetx, offsety);
        return true;
    }
    protected bool MouseDown(MouseEventArgs e)
    {
        HandleDown(e.OffsetX, e.OffsetY);
        return true;
    }
    protected void HandleDown(double x, double y)
    {
        if (!PracticeDrawingMode)
        {
            if (!HubCanDraw) return;
            if (Scene != SceneType.Play) return;
        }
        if (Context == null) return;

        // put down the pen
        PreviousX = x;
        PreviousY = y;
        DrawingPenIsDown = true;
    }

    protected async Task<bool> TouchMove(TouchEventArgs e)
    {
        if (e.Touches == null || e.Touches.Length == 0) return false;

        // use the cached canvas bounding box
        if (CanvasRect == null) CanvasRect = await JSRuntime.InvokeAsync<BoundingClientRect>("DOMGetBoundingClientRect", "canvas");

        // convert to offset
        var offsetx = e.Touches[0].ClientX - CanvasRect.Left;
        var offsety = e.Touches[0].ClientY - CanvasRect.Top;

        // handle move
        HandleMove(offsetx, offsety);
        return true;
    }
    protected bool MouseMove(MouseEventArgs e)
    {
        HandleMove(e.OffsetX, e.OffsetY);
        return true;
    }
    protected async void HandleMove(double x, double y)
    {
        if (!PracticeDrawingMode)
        {
            if (!HubCanDraw) return;
            if (Scene != SceneType.Play) return;
        }

        if (PreviousX >= 0 && PreviousY >= 0 && DrawingPenIsDown)
        {
            // draw a point
            DrawLine(PreviousX, PreviousY, x, y, CurrentColor, DiameterInput);
            if (!PracticeDrawingMode) await SendLine(PreviousX, PreviousY, x, y, CurrentColor, DiameterInput);

            // capture for next move
            PreviousX = x;
            PreviousY = y;
        }
    }

    private async void DrawLine(double x1, double y1, double x2, double y2, string color, float diameter)
    {
        if (!PracticeDrawingMode)
        {
            if (Scene != SceneType.Play) return;
        }
        if (Context == null) return;

        await Context.BeginBatchAsync();
        {
            await Context.SetStrokeStyleAsync(color);
            await Context.SetLineWidthAsync(diameter);
            await Context.BeginPathAsync();
            await Context.MoveToAsync(x1, y1);
            await Context.LineToAsync(x2, y2);
            await Context.StrokeAsync();
        }
        await Context.EndBatchAsync();
    }

    private async void WriteText(float x, float y, int fontsize, string text)
    {
        if (Context == null) return;

        await Context.BeginBatchAsync();
        {
            await Context.SetFillStyleAsync("rgba(0,0,0,1.0)");
            await Context.SetFontAsync($"{fontsize}px Arial");
            await Context.FillTextAsync(text: text, x, y);
        }
        await Context.EndBatchAsync();
    }

    private async void ClearScreen()
    {
        if (!PracticeDrawingMode)
        {
            if (Scene != SceneType.Play) return;
        }
        if (Context == null) return;

        // clear the local screen
        await Context.BeginBatchAsync();
        {
            await Context.SetFillStyleAsync("rgba(255,255,255,1.0)");
            await Context.FillRectAsync(x: 0, y: 0, Width, Height);
        }
        await Context.EndBatchAsync();
    }
}


